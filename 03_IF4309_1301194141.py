# -*- coding: utf-8 -*-
"""Tupro3_KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eBZW-jbr4pXa6tM4bLwpExUkJVA-decs

# **Tugas Pemrograman Pengantar AI 3 K-Nearest Neighbor**

(1301194141) Ni Made Dwipadini Puspitarini

(1301190318) Iqbal Saviola Syah Billhaq		

(1301194288) Afrizal Syahruluddin Yusuf

# **Import Library**
"""

import pandas as pd
import numpy as np

"""# **Read Dataset**"""

!gdown --id 1mHvbeuKY-KZ_OqvHx_72Z5RcAPLMneIg

df = pd.read_excel('mobil.xls')
df.head(10)

"""# **Data Preprocessing**"""

df.describe()

df.shape

df.info()

df.isna().sum()

df = df.rename({'Harga (Ratus Juta)': 'Harga'}, axis=1)
df.columns

def normalize(x):
  return ((x-x.min()) / (x.max()-x.min()))*10

col = list(df.iloc[:,[1,2,3,4,5]])                         
for i in range(len(col)):                     
  df[[col[i]]] = df[[col[i]]].apply(normalize)

df

"""# **Perhitungan Jarak**"""

def euclidean_method(data1, data2):
  return np.sqrt(sum([(data1[i] - data2[i]) ** 2 for i in range(len(data1))]))

def manhattan_method(data1, data2):
  return sum([abs(data1[i] - data2[i]) for i in range(len(data1))])

def minkowski_method(data1, data2):
  return sum([abs(data1[i] - data2[i]) ** 1.5 for i in range(len(data1))]) ** (1/1.5)

def supremum_method(data1, data2):
  return max([abs(data1[i] - data2[i]) for i in range(len(data1))])

def get_neighbors(data1, data2, k):
    euclidean, manhattan, minkowski, supremum = [], [], [], []
    for i in range(len(data1)):
        row = data1.iloc[i, [1, 2, 3, 4, 5]].tolist()
        euclidean.append(
            [euclidean_method(row, data2), df['Nama Mobil'][i]])
        minkowski.append(
            [minkowski_method(row, data2), df['Nama Mobil'][i]])
        manhattan.append(
            [manhattan_method(row, data2), df['Nama Mobil'][i]])
        supremum.append(
            [supremum_method(row, data2), df['Nama Mobil'][i]])
    
    euclidean = sorted(euclidean)[:k]
    manhattan = sorted(manhattan)[:k]
    minkowski = sorted(minkowski)[:k]
    supremum = sorted(supremum)[:k]

    return euclidean, manhattan, minkowski, supremum

"""# **Klasifikasi KNN**"""

def knn(data1, data2, k = 3):
  euclidean, manhattan, minkowski, supremum = get_neighbors(data1, data2, k)
  dist = [['Euclidean', euclidean], ['Manhattan', manhattan], [
      'Minkowski', minkowski], ['Supremum', supremum]]

  return dist

"""# **Main Program**"""

ukuran = float(input("Kategori Ukuran Mobil \t\t: "))
kenyamanan = float(input("Kategori Kenyamanan Mobil \t: "))
irit = float(input("Kategori Keiritan Mobil \t: "))
kecepatan = float(input("Kategori Kecepatan Mobil \t: "))
harga = float(input("Kategori Harga Mobil \t\t: "))

dist = knn(df, [ukuran, kenyamanan, irit, kecepatan, harga])
for method in dist:
  print("\n--------------------------------------------------")
  print(f'|Metode yang digunakan : {method[0]}\t\t |')
  print("--------------------------------------------------")
  res_car = []
  for i, dist in enumerate(method[1]):
      print(f'{i+1}.Nama Mobil \t: {dist[1]} \n  Jarak \t: {round(dist[0], 2)}')
      res_car.append(dist[1])
  pd.DataFrame(res_car, columns=['Nama Mobil']).to_excel(
      f'rekomendasi_{method[0]}.xls', engine='openpyxl', index=False)